# -*- coding: utf-8 -*-
"""
Created on Wed Aug  7 15:05:36 2019

@author: Aisha.Xu
"""
"""this is the programming enabling the human player to play on the convas, and the computer decides
it move and displays it on the convas."""

import tkinter as tk
import justice 
import policy as pi
import reju_RL as rej

#theta should be imported from reju_RL in general, this theta is a copied result of a theta generated by reju_RL
theta=[-2.28250276e-03,-4.51016553e-02,-2.71385498e-02,6.61469556e-02,8.61285837e-02,-4.92812541e-02,-5.19262969e-02,1.27485068e-02,-9.01160391e-03,3.93159958e-02,-1.21638701e-01,-1.39417754e-02,3.80478951e-02,-9.22008273e-03,-2.92922265e-02,8.17830987e-02,1.17192154e-01,-7.66833526e-02,5.14365225e-03,-1.80588434e-01,-3.49020456e-02,-2.25725121e-02,4.50243009e-02,-2.98857414e-02,1.47044120e-02,-4.37380996e-02,4.33301274e-02,1.28917854e-02,4.27268481e-02,-1.41742976e-02,3.92213492e-02,1.88334867e-03,-5.40006412e-02,-4.00116355e-02,-2.06647493e-02,5.81637853e-02,-2.63926257e-03,1.33847723e-04,9.84556271e-02,2.97100547e-02,1.24741054e-02,1.34013478e-01,-5.05625824e-03,-7.02502326e-02,-2.35786480e-02,-2.90409903e-02,-7.99970544e-02,9.13547842e-02,-1.36588335e-02,4.11037025e-02,-1.50152237e-02,3.86975619e-02,-4.33609936e-02,1.97262359e-02,-6.10028459e-02,2.83771232e-02,-9.57806866e-02,-1.10856487e-01,2.41800497e-03,3.75038846e-02,1.43017958e-01,-4.85690920e-03,-3.29843597e-02,-9.42628650e-02,-1.13799783e-02,1.02254638e-02,-8.23458877e-02,-1.92267730e-03,-1.04276893e-01,4.91202306e-02,-1.32400680e-01,4.41614020e-02,-1.67376765e-02,-2.34530986e-02,6.68688406e-02,-8.98875058e-02,8.68905656e-02,-1.70967212e-03,6.75318475e-02,4.24791406e-02,1.39026322e-03,-1.81024342e-02,4.22053157e-03,-1.04864296e-01,7.50429322e-02,-8.77380713e-04,2.30281131e-02,3.88341120e-02,3.00930599e-02,-4.28732892e-02,3.89437153e-02,-7.48380004e-02,6.90896576e-02,2.01431758e-02,-3.67931742e-02,1.14755348e-02,-3.32006699e-02,1.47073596e-02,-3.73266729e-02,2.71831438e-02,3.20425803e-02,2.56547959e-02,-1.15124917e-01,3.20834051e-02,-2.14877250e-03,2.98078925e-02,-6.71118138e-02,-2.45218519e-02,3.40469720e-02,2.60426451e-02,-4.29230956e-03,-2.39771218e-02,8.99560869e-02,4.18707364e-02,5.20678534e-02,9.58123813e-02,-3.76979866e-02,-7.19907218e-03,5.85253021e-02,1.69305113e-02,7.05366359e-02,3.56810283e-02,6.73187075e-03,2.96784342e-02,1.30188843e-01,7.94779269e-02,1.31782366e-02,-1.55424588e-02,-4.98470131e-02,2.32455105e-03,-4.84253650e-02,3.11124666e-02,4.28179176e-02,-2.73204741e-04,2.06211040e-01,1.41225823e-01,3.23520839e-02,-1.84148637e-02,-6.32813525e-02,-1.04809620e-01,1.77455495e-02,-1.49291593e-02,2.56658692e-02,5.99514173e-02,3.03460098e-03,-2.82175108e-02,7.92652755e-03,-3.40237019e-02,8.24659394e-03,4.36500902e-02,-1.12546676e-01,1.29833211e-01,-8.21251705e-02,4.06525042e-03,6.42178108e-02,-1.73623147e-02,-2.78161051e-02,1.59558121e-03,7.76405164e-03,-5.41706587e-02,-7.61397773e-02,3.53328559e-02,-1.55257490e-02,-3.52576390e-02,4.29586332e-02,-2.26823980e-02,4.92329677e-02,-2.18079900e-02,2.79530580e-02,5.62686826e-02,-3.42621340e-02,-5.79051476e-02,-7.14176607e-03,6.44105095e-03,6.41845902e-02,-4.48203982e-02,-1.79378718e-02,-1.35319757e-02,-4.37835897e-02,-5.65900617e-02,1.11309003e-02,-4.61199309e-02,-1.56353227e-01,6.17365553e-03,-3.92007118e-02,-7.33227491e-02,5.35104174e-02,7.97204914e-02,-9.10617076e-02,-4.56454281e-02,-5.07560378e-02,4.33619543e-02,-2.23746847e-02,5.37035137e-02,-6.40239318e-02,-6.62746494e-02,2.57057991e-02,5.39328243e-02,-3.92912026e-02,6.42504979e-02,3.01591345e-02,-8.74640691e-02,-3.32363581e-02,2.45925959e-04,-1.23641296e-01,-1.52479216e-02,4.23388546e-02,-5.44498342e-02,1.06105995e-02,1.81411022e-02,6.45614337e-02,3.06814851e-02,-5.70979962e-02,3.06682990e-02,-7.95807359e-02,-2.16082407e-06,-9.14183882e-02,-9.62764440e-02,1.25068773e-03,-3.79987638e-02,5.13722286e-02,-5.83466257e-02,3.54268633e-02,2.81379851e-02,9.50508395e-02,-5.16736637e-02,-1.19669979e-02,5.23425445e-02,4.48736186e-02,-2.43901249e-02,-6.06344415e-02,1.27404645e-02,-1.42344763e-02,-1.54206931e-02,1.27011555e-02,-7.62553189e-03,-2.76669112e-02,-1.18182051e-02,-4.00116383e-02,4.08767051e-02,5.40405862e-02,2.70789449e-02,3.87876011e-02,5.55867597e-02,-5.18995128e-02,-1.64078945e-01,-1.03140613e-02,-4.89790003e-02,1.09801610e-01,7.88873032e-02,-2.83283677e-04,2.68900489e-02,-1.15820528e-01,-1.79307648e-01,5.08908338e-03,4.54180551e-02,-6.16102624e-03,-5.39328884e-02,-2.64391996e-02,5.90461898e-02,6.73675396e-02,2.28479049e-02,-9.06142017e-03,-2.92148818e-02,5.55789411e-03,-2.13372722e-02,1.05053094e-01,1.67216584e-02,7.18257028e-02,8.45278533e-02,4.59011034e-03,2.31775924e-02,3.57081333e-02,-3.78645365e-02,-9.91474247e-02,-1.26915750e-02,-5.46985015e-02,4.38061478e-02,-8.53801885e-02,1.19279779e-01,-1.12464172e-02,3.86804504e-02,4.84409098e-02,4.84862176e-03,-3.21587811e-02,-4.50231925e-02,1.79226118e-02,-6.01585410e-02,3.85783627e-02,5.61733683e-02,5.29612153e-02]
mypolicy = pi.policy(theta)

root = tk.Tk()
root.title('Renju')
root.geometry('700x700')


w = tk.Canvas(root,width=700,height=700,background='white')
#l = tk.Label(root,text='haha',bg = 'white',width = 100,height =50)
#l.pack(side = tk.TOP)

for num in range(1,18):
    w.create_line(num*40, 40, num*40, 680, width =2)
for num in range(1,18):
    w.create_line(40,num*40,680,num*40,width=2)

    
position_storage = {}
step_count = 0
def add_step_count():
    global step_count
    step_count += 1

def position_to_str(x,y):
    return str(x)+','+str(y)
    
        
def paint(event):
    if step_count%2 !=1:
        colour = "black"
        colour_number = 1
    else:
        colour = 'pink'
        colour_number = -1
    
    if event.x%40 < 20:
        x = (event.x//40)*40
    else:
        x = ((event.x//40)+1)*40
    
    if event.y%40 < 20:
        y = (event.y//40)*40
    else:
        y = ((event.y//40)+1)*40
    print(x,y)
    position_str = position_to_str(x,y)
    
    
    if position_str not in position_storage.keys():
        x1,y1=(x-10),(y-10)
        x2,y2 = (x+10),(y+10)
        w.create_oval(x1,y1,x2,y2,fill = colour)
        position_storage[position_str] = colour_number
        add_step_count()

    j = justice.rule(x,y,position_storage)
    result = j.justice()
    print(result)
    
    #result = justice(x,y,position_storage)
    if result != False:
        w.create_text(300,300,font = ('Arial',50),text = result)
        
    if result == False:
        q,move = mypolicy.move(theta,position_storage)
        print('q=',q)
        x = move[0]
        y = move[1]
        x1,y1=(x-10),(y-10)
        x2,y2 = (x+10),(y+10)
        w.create_oval(x1,y1,x2,y2,fill = 'pink')
        position_storage[position_str] = 1
        add_step_count()
        
        
w.pack()
w.bind("<Button-1>",paint)

root.mainloop()
print(position_storage)